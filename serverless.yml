# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: tba21

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

plugins:
  - serverless-plugin-typescript
  - serverless-dotenv-plugin
  - serverless-offline
  - serverless-api-gateway-caching

custom:
  # Enable API GW caching with some global options set
  apiGatewayCaching:
    enabled: true # enabled but still needs to be turned on for each function
    ttlInSeconds: 180 # 3 min
    dataEncrypted: true

provider:
  name: aws
  runtime: nodejs8.10
  stage: ${env:STAGE, 'prod'}
  region: ${env:REGION, 'eu-central-1'}
  versionFunctions: false
  environment:
    # AWS
    USER_POOL_ID: ${env:USER_POOL_ID}

    # Database
    UPLOADS_TABLE: ${env:UPLOADS_TABLE}
    TYPES_TABLE: ${env:TYPES_TABLE}
    ITEMS_TABLE: ${env:ITEMS_TABLE}
    COLLECTIONS_TABLE: ${env:COLLECTIONS_TABLE}
    COLLECTIONS_ITEMS_TABLE: ${env:COLLECTIONS_ITEMS_TABLE}
    CONCEPT_TAGS_TABLE: ${env:CONCEPT_TAGS_TABLE}
    KEYWORD_TAGS_TABLE: ${env:KEYWORD_TAGS_TABLE}

    PGUSER: ${env:PGUSER}
    PGPASSWORD: ${env:PGPASSWORD}
    PGHOST: ${env:PGHOST}
    PGPORT: ${env:PGPORT, "5432"}
    PGDATABASE: ${env:PGDATABASE}
    PGSSL: ${env:PGSSL}

    # Mailchimp
    MC_DC: ${env:MC_DC}
    MC_APIKEY: ${env:MC_APIKEY}
    MC_AUDIENCE_ID: ${env:MC_AUDIENCE_ID}
  iamRoleStatements:
    - Effect: 'Allow'
      Action:
        - 'lambda:InvokeFunction'
      Resource:
      - Fn::Join:
        - ':'
        - - arn:aws:lambda
          - Ref: AWS::Region
          - Ref: AWS::AccountId
          - function:${self:service}-${opt:stage, self:provider.stage}-*

resources:
  Resources:
    TBA21Role:
      Type: AWS::IAM::Role
      Properties:
        RoleName: tba21Role-${opt:stage, self:provider.stage}
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: tba21Policy-${opt:stage, self:provider.stage}
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow # note that these rights are given in the default policy and are required if you want logs out of your lambda(s)
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource:
                    - 'Fn::Join':
                        - ':'
                        -
                          - 'arn:aws:logs'
                          - Ref: 'AWS::Region'
                          - Ref: 'AWS::AccountId'
                          - 'log-group:/aws/lambda/*:*:*'
                - Effect: Allow
                  Action:
                    - s3:GetObject
                  Resource:
                    - 'arn:aws:s3:::tba21-content*/*'
                - Effect: Allow
                  Action:
                    - cognicity-idp:*
                  Resource:
                    - 'Fn::Join':
                        - ':'
                        -
                          - 'arn:aws:cognito-idp'
                          - Ref: 'AWS::Region'
                          - Ref: 'AWS::AccountId'
                          - 'userpool/eu-central-1_bnvWk6I6I'
    ApiGatewayAuthorizer:
      DependsOn:
          - ApiGatewayRestApi
      Type: AWS::ApiGateway::Authorizer
      Properties:
        Name: cognito-authorizer
        IdentitySource: method.request.header.Authorization
        RestApiId:
          Ref: ApiGatewayRestApi
        Type: COGNITO_USER_POOLS
        ProviderARNs: ['arn:aws:cognito-idp:eu-central-1:811876431819:userpool/eu-central-1_MClQ7jNon', 'arn:aws:cognito-idp:eu-central-1:811876431819:userpool/eu-central-1_bnvWk6I6I']

functions:
## Items
  getItems:
    handler: src/items/items.get
    description: Returns items from the database.
    events:
      - http:
          path: items/get
          method: get
          cors: true
          authorizer: aws_iam

  getItemsBys3Key:
    handler: src/items/items.getBys3Key
    description: Returns items s3 key from the database.
    events:
      - http:
          path: items/getBys3Key
          method: get
          cors: true
          authorizer: aws_iam
          caching:
            enabled: true
            cacheKeyParameters:
              - name: request.querystring.s3Key

  getItemsByTag:
    handler: src/items/items.getByTag
    description: Returns items by tag from the database.
    events:
      - http:
          path: items/getByTag
          method: get
          cors: true
          authorizer: aws_iam
          caching:
            enabled: true
            cacheKeyParameters:
              - name: request.querystring.tag

  getItemsByType:
    handler: src/items/items.getByType
    description: Returns items by type from the database.
    events:
      - http:
          path: items/getByType
          method: get
          cors: true
          authorizer: aws_iam
          caching:
            enabled: true
            cacheKeyParameters:
              - name: request.querystring.type

  getItemsByPerson:
    handler: src/items/items.getByPerson
    description: Returns items by person from the database.
    events:
      - http:
          path: items/getByPerson
          method: get
          cors: true
          authorizer: aws_iam
          caching:
            enabled: true
            cacheKeyParameters:
              - name: request.querystring.person

  changeItemStatus:
    handler: src/items/items.changeStatus
    description: Change the status of an item
    events:
      - http:
          path: items/changeStatus
          method: get
          cors: true
          authorizer: aws_iam
          caching:
            enabled: true
            cacheKeyParameters:
              - name: request.querystring.id
              - name: request.querystring.status

  getItemsInBounds:
    handler: src/items/items.getItemsInBounds
    description: Get all items inside a bounding box
    events:
      - http:
          path: items/getItemsInBounds
          method: get
          cors: true
          authorizer: aws_iam
          caching:
            enabled: true
            cacheKeyParameters:
              - name: request.querystring.lat_se
              - name: request.querystring.lng_sw
              - name: request.querystring.lng_ne
              - name: request.querystring.lat_nw

### Collections
  getGetCollectionsByTag:
    handler: src/collections/collections.getByTag
    description: Returns collections by tag from the database.
    events:
      - http:
          path: collections/getByTag
          method: get
          cors: true
          authorizer: aws_iam
          caching:
            enabled: true
            cacheKeyParameters:
              - name: request.querystring.tag

  getCollectionById:
    handler: src/collections/collections.getById
    description: Returns collections id from the database.
    events:
      - http:
          path: collections/getById
          method: get
          cors: true
          authorizer: aws_iam
          caching:
            enabled: true
            cacheKeyParameters:
              - name: request.querystring.id

  getCollectionsByPerson:
    handler: src/collections/collections.getByPerson
    description: Returns collection by person from the database.
    events:
      - http:
          path: collections/getByPerson
          method: get
          cors: true
          authorizer: aws_iam
          caching:
            enabled: true
            cacheKeyParameters:
              - name: request.querystring.person

  changeCollectionStatus:
    handler: src/collections/collections.changeStatus
    description: Change the status of a collection
    events:
      - http:
          path: collections/changeStatus
          method: get
          cors: true
          authorizer: aws_iam
          caching:
            enabled: true
            cacheKeyParameters:
              - name: request.querystring.id
              - name: request.querystring.status

  getCollectionsInBounds:
    handler: src/collections/collections.getInBounds
    description: Gets the collections within the specified bounds
    events:
      - http:
          path: collections/getInBounds
          method: get
          cors: true
          authorizer: aws_iam
          caching:
            enabled: true
            cacheKeyParameters:
              - name: request.querystring.lat_se
              - name: request.querystring.lng_sw
              - name: request.querystring.lng_ne
              - name: request.querystring.lat_nw

  deleteItem:
    handler: src/items/items.deleteItem
    description: Deletes an item
    events:
      - http:
          path: items/deleteItem
          method: delete
          cors: true
          authorizer: aws_iam

  deleteItemsFromCollection:
    handler: src/items/items.deleteItemsFromCollection
    description: Deletes items from a collection
    events:
      - http:
          path: items/deleteItemsFromCollection
          method: delete
          cors: true
          authorizer: aws_iam

  ###### ADMIN FUNCTIONS ######

#### Collections
  adminGetCollections:
    handler: src/admin/collections/collections.get
    description: Returns collections from the database.
    events:
      - http:
          path: admin/collections/get
          method: get
          cors: true
          authorizer: aws_iam

  adminGetCollectionById:
    handler: src/admin/collections/collections.getById
    description: Returns collections id from the database.
    events:
      - http:
          path: admin/collections/getById
          method: get
          cors: true
          authorizer: aws_iam
          caching:
            enabled: true
            cacheKeyParameters:
              - name: request.querystring.id

  adminGetCollectionsByTag:
    handler: src/admin/collections/collections.getByTag
    description: Returns collections by tag from the database.
    events:
      - http:
          path: admin/collections/getByTag
          method: get
          cors: true
          authorizer: aws_iam
          caching:
            enabled: true
            cacheKeyParameters:
              - name: request.querystring.tag

  adminGetCollectionsByPerson:
    handler: src/admin/collections/collections.getByPerson
    description: Returns collection by person from the database.
    events:
      - http:
          path: admin/collections/getByPerson
          method: get
          cors: true
          authorizer: aws_iam
          caching:
            enabled: true
            cacheKeyParameters:
              - name: request.querystring.person

  adminDeleteCollection:
    handler: src/admin/collections/delete.deleteById
    description: Removes a collection and it's collection_items entry from the database
    events:
      - http:
          path: admin/collections/delete
          method: delete
          cors: true
          authorizer: aws_iam

  adminUpdateCollection:
    handler: src/admin/collections/update.updateById
    description: Removes a collection and it's collection_items entry from the database
    events:
      - http:
          path: admin/collections/update
          method: put
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

#### Items
  adminGetItems:
    handler: src/admin/items/items.get
    description: Returns items from the database.
    events:
      - http:
          path: admin/items/get
          method: get
          cors: true
          authorizer: aws_iam

  adminGetItemsBys3Key:
    handler: src/admin/items/items.getBys3Key
    description: Returns items s3 key from the database.
    events:
      - http:
          path: admin/items/getBys3Key
          method: get
          cors: true
          authorizer: aws_iam
          caching:
            enabled: true
            cacheKeyParameters:
              - name: request.querystring.s3Key

  adminGetItemsByTag:
    handler: src/admin/items/items.getByTag
    description: Returns items by tag from the database.
    events:
      - http:
          path: admin/items/getByTag
          method: get
          cors: true
          authorizer: aws_iam
          caching:
            enabled: true
            cacheKeyParameters:
              - name: request.querystring.tag

  adminGetItemsByType:
    handler: src/admin/items/items.getByType
    description: Returns items by type from the database.
    events:
      - http:
          path: admin/items/getByType
          method: get
          cors: true
          authorizer: aws_iam
          caching:
            enabled: true
            cacheKeyParameters:
              - name: request.querystring.type

  adminItemsByPerson:
    handler: src/admin/items/items.getByPerson
    description: Returns items by person from the database.
    events:
      - http:
          path: admin/items/getByPerson
          method: get
          cors: true
          authorizer: aws_iam
          caching:
            enabled: true
            cacheKeyParameters:
              - name: request.querystring.person

  adminAddKeywordTag:
    handler: src/admin/items/items.addKeywordTag
    description: Change the keyword tags on an item
    events:
      - http:
          path: admin/items/addKeywordTag
          method: get
          cors: true
          authorizer: aws_iam
          caching:
            enabled: true
            cacheKeyParameters:
              - name: request.querystring.id
              - name: request.querystring.tag


# MAILCHIMP
  mailchimpGetSegments:
    handler: src/mailchimp/mailchimp.getSegments
    description: Get all subscriber tags
    events:
      - http:
          path: mailchimp/getSegments
          method: get
          cors: true
          authorizer: aws_iam

  mailchimpGetSubscriberTags:
    handler: src/mailchimp/mailchimp.getSubscriberTags
    description: Get subscriber tags via their hashed email
    events:
      - http:
          path: mailchimp/getSubscriberTags
          method: get
          cors: true
          authorizer: aws_iam

  mailchimpPostSubscriberAddTag:
    handler: src/mailchimp/mailchimp.postSubscriberAddTag
    description: Adds a tag to a subscriber
    events:
      - http:
          path: mailchimp/postSubscriberAddTag
          method: post
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  mailchimpDeleteSubscriberRemoveTag:
    handler: src/mailchimp/mailchimp.deleteSubscriberRemoveTag
    description: Removes a tag from a subscriber
    events:
      - http:
          path: mailchimp/deleteSubscriberRemoveTag
          method: delete
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  mailchimpPostSubscribeUser:
    handler: src/mailchimp/mailchimp.postSubscribeUser
    description: Sets the users status to subscribed
    events:
      - http:
          path: mailchimp/postSubscribeUser
          method: post
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
