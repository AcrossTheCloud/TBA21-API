# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: tba21

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

plugins:
  - serverless-plugin-typescript
  - serverless-dotenv-plugin
  - serverless-offline
  - serverless-api-gateway-caching


custom:
  # Enable API GW caching with some global options set
  apiGatewayCaching:
    enabled: true # enabled but still needs to be turned on for each function
    ttlInSeconds: 180 # 3 min
    dataEncrypted: true

provider:
  name: aws
  runtime: nodejs8.10
  stage: ${env:STAGE, 'prod'}
  region: ${env:REGION, 'eu-central-1'}
  environment:
    ITEMS_TABLE: tba21-items-${opt:stage, self:provider.stage}
    PEOPLE_TABLE: tba21-people-${opt:stage, self:provider.stage}
    IMAGE_TAG_TABLE: tba21-image-tags-${opt:stage, self:provider.stage}

    PGUSER: ${env:PGUSER}
    PGPASSWORD: ${env:PGPASSWORD}
    PGHOST: ${env:PGHOST}
    PGPORT: ${env:PGPORT, "5432"}
    PGDATABASE: ${env:PGDATABASE}
    PGSSL: ${env:PGSSL}
  iamRoleStatements:
    - Effect: 'Allow'
      Action:
        - 'lambda:InvokeFunction'
      Resource:
      - Fn::Join:
        - ':'
        - - arn:aws:lambda
          - Ref: AWS::Region
          - Ref: AWS::AccountId
          - function:${self:service}-${opt:stage, self:provider.stage}-*

resources:
  Resources:
    TBA21Role:
      Type: AWS::IAM::Role
      Properties:
        RoleName: tba21Role-${opt:stage, self:provider.stage}
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: tba21Policy-${opt:stage, self:provider.stage}
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow # note that these rights are given in the default policy and are required if you want logs out of your lambda(s)
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource:
                    - 'Fn::Join':
                      - ':'
                      -
                        - 'arn:aws:logs'
                        - Ref: 'AWS::Region'
                        - Ref: 'AWS::AccountId'
                        - 'log-group:/aws/lambda/*:*:*'
                - Effect: Allow
                  Action:
                    - s3:GetObject
                  Resource:
                    - 'arn:aws:s3:::tba21-content*/*'
                - Effect: Allow
                  Action:
                    - cognicity-idp:*
                  Resource:
                    - 'Fn::Join':
                      - ':'
                      -
                        - 'arn:aws:cognito-idp'
                        - Ref: 'AWS::Region'
                        - Ref: 'AWS::AccountId'
                        - 'userpool/eu-central-1_bnvWk6I6I'

functions:
  getItems:
    handler: src/items/items.get
    description: Returns items from the database.
    events:
      - http:
          path: items/get
          method: get
          cors: true
          authorizer: aws_iam

  getItemsById:
    handler: src/items/items.getById
    description: Returns items id from the database.
    events:
      - http:
          path: items/getById
          method: get
          cors: true
          authorizer: aws_iam
          caching:
            enabled: true
            cacheKeyParameters:
              - name: request.querystring.id

  getItemsByTag:
    handler: src/items/items.getByTag
    description: Returns items by tag from the database.
    events:
      - http:
          path: items/getByTag
          method: get
          cors: true
          authorizer: aws_iam
          caching:
            enabled: true
            cacheKeyParameters:
              - name: request.querystring.tag

###### ADMIN FUNCTIONS ######

  getCollectionsAdmin:
    handler: src/admin/collections/collections.get
    description: Returns collections from the database.
    events:
      - http:
          path: admin/collections/get
          method: get
          cors: true
          authorizer: aws_iam

  getCollectionByIdAdmin:
    handler: src/admin/collections/collections.getById
    description: Returns collections id from the database.
    events:
      - http:
          path: admin/collections/getById
          method: get
          cors: true
          authorizer: aws_iam
          caching:
            enabled: true
            cacheKeyParameters:
              - name: request.querystring.id

  getCollectionsByTagAdmin:
    handler: src/admin/collections/collections.getByTag
    description: Returns collections by tag from the database.
    events:
      - http:
          path: admin/collections/getByTag
          method: get
          cors: true
          authorizer: aws_iam

  getItemsAdmin:
    handler: src/admin/items/items.get
    description: Returns items from the database.
    events:
      - http:
          path: admin/items/get
          method: get
          cors: true
          authorizer: aws_iam

  getItemsByIdAdmin:
    handler: src/admin/items/items.getById
    description: Returns items id from the database.
    events:
      - http:
          path: admin/items/getById
          method: get
          cors: true
          authorizer: aws_iam
          caching:
            enabled: true
            cacheKeyParameters:
              - name: request.querystring.id

  getItemsByTagAdmin:
    handler: src/admin/items/items.getByTag
    description: Returns items by tag from the database.
    events:
      - http:
          path: admin/items/getByTag
          method: get
          cors: true
          authorizer: aws_iam
          caching:
            enabled: true
            cacheKeyParameters:
              - name: request.querystring.tag

