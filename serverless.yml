# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: tba21

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: nodejs8.10
  stage: ${env:STAGE, 'prod'}
  region: ${env:REGION, 'eu-central-1'}
  environment:
    ITEMS_TABLE: tba21-items-${opt:stage, self:provider.stage}
    PEOPLE_TABLE: tba21-people-${opt:stage, self:provider.stage}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/tba21*"
    - Effect: 'Allow'
      Action:
        - 'lambda:InvokeFunction'
      Resource:
      - Fn::Join:
        - ':'
        - - arn:aws:lambda
          - Ref: AWS::Region
          - Ref: AWS::AccountId
          - function:${self:service}-${opt:stage, self:provider.stage}-*

resources:
  Resources:
    TBA21DynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: ocean
            AttributeType: S
          -
            AttributeName: timestamp
            AttributeType: N

        KeySchema:
          -
            AttributeName: ocean
            KeyType: HASH
          -
            AttributeName: timestamp
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 2
          WriteCapacityUnits: 2
        TableName: tba21-items-${opt:stage, self:provider.stage}
    TBA21ArtistDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: personId
            AttributeType: S
          -
            AttributeName: name
            AttributeType: S
        KeySchema:
          -
            AttributeName: personId
            KeyType: HASH
          -
            AttributeName: name
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 2
          WriteCapacityUnits: 2
        TableName: tba21-people-${opt:stage, self:provider.stage}
    TBA21Role:
      Type: AWS::IAM::Role
      Properties:
        RoleName: tba21Role-${opt:stage, self:provider.stage}
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: tba21Policy-${opt:stage, self:provider.stage}
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow # note that these rights are given in the default policy and are required if you want logs out of your lambda(s)
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource:
                    - 'Fn::Join':
                      - ':'
                      -
                        - 'arn:aws:logs'
                        - Ref: 'AWS::Region'
                        - Ref: 'AWS::AccountId'
                        - 'log-group:/aws/lambda/*:*:*'

functions:
  getItems:
    handler: items.get
    events:
      - http:
          path: items
          method: get
          cors: true
  getItemsGraph:
    handler: items.getGraph
    events:
      - http:
          path: itemsGraph
          method: get
          cors: true
  postItem:
    handler: items.post
    events:
      - http:
          path: item
          method: post
          cors: true
  getPeople:
    handler: people.get
    events:
      - http:
          path: people
          method: get
          cors: true
  postPerson:
    handler: people.post
    events:
      - http:
          path: person
          method: post
          cors: true
  patchPerson:
    handler: people.patch
    events:
      - http:
          path: person
          method: patch
          cors: true
  getTags:
    handler: items.tags
    events:
      - http:
          path: tags
          method: get
          cors: true
  getRoles:
    handler: people.roles
    events:
      - http:
          path: roles
          method: get
          cors: true
